%%-*- mode: erlang -*-
%% emq_auth_ldap config mapping
{mapping, "auth.ldap.servers", "emq_auth_ldap.ldap", [
  {default, "127.0.0.1"},
  {datatype, string}
]}.

{mapping, "auth.ldap.port", "emq_auth_ldap.ldap", [
  {default, 389},
  {datatype, integer}
]}.

{mapping, "auth.ldap.bind_dn", "emq_auth_ldap.ldap", [
  {datatype, string},
  {default, "cn=root,dc=emqtt,dc=com"}
]}.

{mapping, "auth.ldap.bind_password", "emq_auth_ldap.ldap", [
  {datatype, string},
  {default, "public"}
]}.

{mapping, "auth.ldap.timeout", "emq_auth_ldap.ldap", [
  {default, 30},
  {datatype, integer}
]}.

{mapping, "auth.ldap.ssl", "emq_auth_ldap.ldap", [
  {default, false},
  {datatype, {enum, [true, false]}}
]}.

{mapping, "auth.ldap.ssl.certfile", "emq_auth_ldap.ldap", [
  {datatype, string}
]}.

{mapping, "auth.ldap.ssl.keyfile ", "emq_auth_ldap.ldap", [
  {datatype, string}
]}.

{mapping, "auth.ldap.ssl.cacertfile ", "emq_auth_ldap.ldap", [
  {datatype, string}
]}.

{mapping, "auth.ldap.ssl.verify", "emq_auth_ldap.ldap", [
  {default, verify_peer},
  {datatype, atom}
]}.

{mapping, "auth.ldap.ssl.fail_if_no_peer_cert", "emq_auth_ldap.ldap", [
  {default, true},
  {datatype, {enum, [true, false]}}
]}.

%% TODO: ssl options...
{translation, "emq_auth_ldap.ldap", fun(Conf) ->
    Servers = string:tokens(cuttlefish:conf_get("auth.ldap.servers", Conf), ","),
    Port = cuttlefish:conf_get("auth.ldap.port", Conf),
    BindDN = cuttlefish:conf_get("auth.ldap.bind_dn", Conf),
    BindPassword = cuttlefish:conf_get("auth.ldap.bind_password", Conf),
    Timeout = cuttlefish:conf_get("auth.ldap.timeout", Conf),
    Opts = [{servers, Servers}, {port, Port}, {timeout, Timeout}, {bind_dn, BindDN}, {bind_password, BindPassword}],
    case cuttlefish:conf_get("auth.ldap.ssl", Conf) of
        true  -> [{ssl, true}|Opts];
        false -> [{ssl, false}|Opts]
    end
end}.

{mapping, "auth.ldap.auth_dn", "emq_auth_ldap.auth_dn", [
  {datatype, string}
]}.

{mapping, "auth.ldap.password_hash", "emq_auth_ldap.password_hash", [
  {datatype, string}
]}.


{translation, "emq_auth_ldap.password_hash", fun(Conf) ->
  HashValue = cuttlefish:conf_get("auth.ldap.password_hash", Conf),
    case string:tokens(HashValue, " ") of
        [Hash]           -> list_to_atom(Hash);
        [Prefix, Suffix] -> {list_to_atom(Prefix), list_to_atom(Suffix)};
        [Hash, MacFun, Iterations, Dklen] -> {list_to_atom(Hash), list_to_atom(MacFun), list_to_integer(Iterations), list_to_integer(Dklen)};
        _                -> plain
    end
end}.



